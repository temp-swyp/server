name: Deploy Spring Boot App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ✅ GitHub에서 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # ✅ JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # ✅ Gradle로 Spring Boot 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # ✅ Docker 로그인
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" > /tmp/docker-password.txt
          docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin < /tmp/docker-password.txt
          rm /tmp/docker-password.txt

      # ✅ Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

      # ✅ SSH로 배포 서버 접속 후 Docker 컨테이너 실행
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if docker ps -q --filter "name=spring-boot-app" | grep -q .; then
              docker stop spring-boot-app
              docker rm spring-boot-app
            fi
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
            docker run -d --name spring-boot-app -p 8080:8080 -e SPRING_PROFILES_ACTIVE=production ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
