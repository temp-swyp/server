name: FitIsland CI/CD

# main 브랜치가 push 되면 실행
on:
  push:
    branches:
      - main

jobs:
  # job1 - jar 빌드
  build:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # JDK 21 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # --- Gradle 설정 (Gradle Wrapper 사용) ---#
      # Gradle Wrapper 를 별도로 설치할 필요 없이 프로젝트에 포함된 gradlew 사용
      # gradlew 실행 권한 추가
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      #--- end ---#

      #환경변수 추가

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 빌드 결과 확인 - 필수 X
      - name: Check build output
        run: ls -al build/libs

      # Docker 컨텍스트에서 JAR 파일 확인 - 필수 X
      - name: Verify JAR file in context
        run: ls -al

      # job 간 이동을 위해서 jar 파일 업로드
      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*SNAPSHOT.jar

  # job2 - Dockerhub 에 이미지 파일 push
  push_to_registry:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    # build 가 끝나고 실행
    needs: build
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # jar 다운로드
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: .

      # 빌드 결과 확인 - 필수 X
      - name: Check build output
        run: ls -al

      # Docker Buildx 설정 -> 빌드 환경 차이로 발생하는 에러문제 해결
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_NAMESPACE }}/fitisland:latest

  # job3 - Docker Hub에서 이미지를 가져와서 실행
  pull_from_registry:
    name: Connect server ssh and pull from Docker Hub
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - name: Connect via SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }} # IP 주소
          username: ${{ secrets.SSH_USER }} # 우분투 서버 사용자 이름
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 접속용 키
          # 순서대로 설명
          # docker_hub에서 도커 이미지 pull
          # 기존 도커 컨테이너 stop
          # docker 컨테이너 삭제
          # docker run -d(백그라운드) -p(포트연결) 8080(호스트서버포트):8080(컨테이너포트)
          # 사용하지 않는 도커 이미지 삭제
          script: |
            sudo docker pull ${{ secrets.DOCKER_NAMESPACE }}/fitisland:latest
            sudo docker stop $(docker ps -aq --filter "name=fitisland-app") || true
            sudo docker rm $(docker ps -aq --filter "name=fitisland-app") || true
            sudo docker run -d -p 8080:8080 --name fitisland-app ${{ secrets.DOCKER_NAMESPACE }}/fitisland:latest
            sudo docker image prune -fa
